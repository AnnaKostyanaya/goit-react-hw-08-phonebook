{"version":3,"file":"static/js/748.5ef85e6f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactElement/ContactElement.module.css?8e20","components/ContactElement/ContactElement.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/filter/filter-selectors.js","components/Filter/Filter.js","components/App/App.module.css","components/ContactBook/ContactBook.jsx","redux/contacts/contacts-selectors.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactForm_btn__wll+u\",\"lable\":\"ContactForm_lable__W7bCm\",\"input\":\"ContactForm_input__Bl93P\"};","import { useState } from \"react\";\nimport style from '../ContactForm/ContactForm.module.css';\nimport { nanoid } from \"nanoid\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import { addContacts } from \"../../redux/contacts/contacts-slice\";\nimport { addContacts  } from \"redux/contacts/contacts-operations\";\nimport { getAllContacts } from \"redux/contacts/contacts-selectors\";\n\nconst ContactForm = () => {\n\nconst [name, setName] = useState(\"\");\nconst [number, setNumber] = useState(\"\");\n\nconst dispatch = useDispatch();\nconst allContacts = useSelector(getAllContacts);\n\nconst handleChange = event => {\nconst {name, value} = event.currentTarget;\nswitch (name) {\n    case 'name':\n        setName(value);\n        break;\n\n    case 'number':\n        setNumber(value);\n        break;\n    \n    default:\n        return;\n    }\n};\n\nconst handleSubmit = event => {\n    const controlName = event.currentTarget.name.value;\n    event.preventDefault();\n    if (onCheckName(controlName)) {\n        alert(`${controlName} is already in contacts`);\n    } else { \n    dispatch(addContacts({ id: nanoid(), name, number }));\n    }\n    clearForm(controlName);\n};\n\nconst clearForm = (name) => {\n    if (onCheckName(name)) {\n        setName(\"\");\n    } else {\n        setName(\"\");\n        setNumber(\"\");\n    }\n}\n\nconst onCheckName = (name) => {\n    if (!allContacts) {\n        return;\n    }\n    const normalizeName = name.toLowerCase();\n    const checkname = allContacts.filter(contact =>\n        contact.name.toLowerCase() === normalizeName\n    );\n    if (checkname.length !== 0) {\n        return true;\n    } else {\n        return false;\n    }\n    }\n    \n\nreturn (\n    <form onSubmit={handleSubmit} >\n        <label className={style.lable} >Name\n            <input className={style.input}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={handleChange}\n                value={name}\n            />\n        </label>\n        <label className={style.lable} >Number\n            <input className={style.input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={handleChange}\n                value={number}\n            />\n        </label>\n    <button variant=\"contained\" className={style.btn} type=\"submit\">Add contact</button>\n    </form>\n);\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__text\":\"ContactElement_contact__text__006DB\",\"contact__tel\":\"ContactElement_contact__tel__VdDUk\",\"contact__btn\":\"ContactElement_contact__btn__l78FL\",\"contact__item\":\"ContactElement_contact__item__M+kvz\",\"swing\":\"ContactElement_swing__QJlA7\"};","import React from 'react';\nimport style from '../ContactElement/ContactElement.module.css';\nimport PropTypes from 'prop-types';\nimport { FcPhone } from 'react-icons/fc';\nimport { IconContext } from \"react-icons\";\nimport { Link } from \"react-router-dom\"; \n\nconst ContactElement = ({ state, contact: { id, name, number } }) => (\n    <li className={style.contact__item}> \n            <IconContext.Provider value={{ size: \"3em\" }}>\n                <div>\n                    <FcPhone className={style.swing} />\n                </div>\n            </IconContext.Provider>\n            <p className={style.contact__text}>{name}</p>\n            <p className={style.contact__tel}>{number}</p>\n            <Link to={id} state={state} className={style.contact__btn}>\n                Change contact\n            </Link>\n    </li>\n);\n\nexport default ContactElement;\n\nContactElement.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n}).isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactlist\":\"ContactList_contactlist__zx6vn\"};","import React from 'react';\nimport ContactElement from '../ContactElement';\nimport style from '../ContactList/ContactList.module.css';\nimport { nanoid } from \"nanoid\";\nimport { useLocation } from \"react-router-dom\"; \n\nimport { useSelector } from \"react-redux\";\n// import { deleteContacts } from \"../../redux/contacts/contacts-slice\";\n\nimport { getFilteredContacts } from \"redux/contacts/contacts-selectors\";\n\n\nconst ContactList = () => {\nconst location = useLocation();\nconst filteredContacts = useSelector(getFilteredContacts);\n\n\n\nreturn (\n    <ul className={style.contactlist}>\n        {filteredContacts.map(contact => (\n            <ContactElement state={{ from: location}} key={nanoid()} id={contact.id} contact={contact} />\n        ))}\n    </ul>\n);\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"lable\":\"Filter_lable__OmyBy\",\"input\":\"Filter_input__N7T3z\"};","export const getFilter = ({filter}) => filter;","import React from 'react';\nimport style from '../Filter/Filter.module.css';\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {setFilter} from \"redux/filter/filter-slice\";\nimport {getFilter} from \"redux/filter/filter-selectors\";\n\n\nconst Filter = () => {\n\nconst filter = useSelector(getFilter);\nconst dispatch = useDispatch();\n\nconst changeFilter = event => {\n    dispatch(setFilter(event.currentTarget.value));\n};\n\nreturn (\n    <label className={style.lable}>\n        Find contacts by name\n        <input className={style.input} type=\"text\" value={filter} onChange={changeFilter} />\n    </label>\n)\n}\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contacts-operations\";\nimport { getError, getIsLoading } from \"redux/contacts/contacts-selectors\";\n\nimport ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\nimport style from '../App/App.module.css';\n\nconst ContactBook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\nreturn (\n  <div className={style.container}>\n    <h1 className={style.main_title}>Phonebook</h1>\n    <ContactForm />\n    <h2 className={style.title}>Contacts</h2>\n    <Filter />\n    {isLoading && !error && <b>Request in progress...</b>}\n    <ContactList />\n  </div>\n);\n}\n\nexport default ContactBook;\n\n","export const getAllContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getCurrentUser = state => state.contacts.currentUser;\nexport const filter = ({filter}) => filter;\n\nexport const getFilteredContacts = ({contacts: {contacts, isLoading, error }, filter}) => {\n    if (!filter) {\n        return contacts;\n    }\n    const getVisibleContacts = () => {\n    const lowerCaseFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(lowerCaseFilter),\n    );\n    };\n    \n    const visibleContacts = getVisibleContacts();\n\n    return visibleContacts;\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","allContacts","useSelector","getAllContacts","handleChange","event","currentTarget","value","clearForm","onCheckName","normalizeName","toLowerCase","filter","contact","length","onSubmit","controlName","preventDefault","alert","addContacts","id","nanoid","className","style","type","pattern","title","required","onChange","variant","state","size","to","location","useLocation","filteredContacts","getFilteredContacts","map","from","getFilter","setFilter","isLoading","getIsLoading","error","getError","useEffect","fetchContacts","contacts","getCurrentUser","currentUser","lowerCaseFilter","includes","getVisibleContacts","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}