{"version":3,"file":"static/js/581.4cf71898.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/shared/components/Modal/Modal.module.css?da56","shared/components/Modal/Modal.jsx","webpack://react-homework-template/./src/shared/components/Modal/ModalQuestion.module.css?d648","shared/components/Modal/ModalQuestion.jsx","webpack://react-homework-template/./src/shared/components/Modal/ModalEditForm.module.css?fa94","shared/components/Modal/ModalEditForm.jsx","webpack://react-homework-template/./src/pages/ContactDetailPage/ContactDetailPage.module.css?d7fd","pages/ContactDetailPage/ContactDetailPage.jsx","redux/contacts/contacts-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modal__backdrop\":\"Modal_modal__backdrop__zqa1y\",\"modal__content\":\"Modal_modal__content__qkKAK\"};","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport style from \"./Modal.module.css\";\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const  Modal = ({ toggleModal, children }) => {\n\nuseEffect(() => {\nwindow.addEventListener('keydown', handleKeyDown);\n\nreturn () => { window.removeEventListener('keydown', handleKeyDown)}\n});\n\nconst handleKeyDown = event => {\nif (event.code === 'Escape') {\n    toggleModal();\n}\n};\n\nconst handleBackdropClick = event => {\nif (event.currentTarget === event.target) {\n    toggleModal();\n}\n};\n\n\nreturn createPortal(\n    <div className={style.modal__backdrop} onClick={handleBackdropClick}>\n    <div className={style.modal__content}>\n        {children}\n    </div>\n    </div>,\n    modalRoot,\n);\n}\n\nexport default Modal;\n\nModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ModalQuestion_btn__nQUYz\",\"list\":\"ModalQuestion_list__OkZfu\",\"text\":\"ModalQuestion_text__RgDMn\"};","import { useDispatch } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { deleteContacts } from \"redux/contacts/contacts-operations\";\nimport PropTypes from 'prop-types';\nimport style from \"./ModalQuestion.module.css\";\n\nconst ModalQuestion = ( { toggleModal } ) => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const { id } = useParams();\n\n    const confirmButtonHandler = () => {\n        dispatch(deleteContacts(id));\n        navigate(\"/contacts\");\n    }\n\n\nreturn (\n    <>\n        <p className={style.text} >Are you sure?</p>\n        <ul className={style.list} >\n            <li>\n                <button className={style.btn} type=\"button\" onClick={() => confirmButtonHandler()}>Confirm</button>\n            </li>\n            <li>\n                <button className={style.btn} type=\"button\" onClick={() => toggleModal()}>Cancel</button>\n            </li>\n        </ul>\n    </>\n)};\n\nexport default ModalQuestion;\n\nModalQuestion.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalEditForm_wrapper__4JlHp\",\"field\":\"ModalEditForm_field__iFi0o\",\"btn\":\"ModalEditForm_btn__BMABc\",\"cancel_btn\":\"ModalEditForm_cancel_btn__5kEhJ\"};","import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeContactDetail } from \"redux/contacts/contacts-operations\";\nimport { getAllContacts } from \"redux/contacts/contacts-selectors\";\nimport PropTypes from 'prop-types';\nimport style from \"./ModalEditForm.module.css\";\n\nconst ModalEditForm = ({ toggleModal }) => {\n\nconst { id } = useParams();\nconst allContacts = useSelector(getAllContacts);\nconst contactDetail = allContacts.filter(contact => contact.id === id);\n\nconst [name, setName] = useState(contactDetail[0].name);\nconst [number, setNumber] = useState(contactDetail[0].number);\n\nconst dispatch = useDispatch();\n\nconst handleChange = event => {\n    const {name, value} = event.currentTarget;\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n\n        case 'number':\n            setNumber(value);\n            break;\n        \n        default:\n            return;\n    }\n};\n\nconst handleSubmit = event => {\n    const controlName = event.currentTarget.name.value;\n    event.preventDefault();\n    if (onCheckName(controlName)) {\n        alert(`${controlName} is already in contacts`);\n    } else { \n    dispatch(changeContactDetail({ id, name, number }));\n    }\n    clearForm(controlName);\n};\n\nconst clearForm = (name) => {\n    if (onCheckName(name)) {\n        setName(\"\");\n    } else {\n        toggleModal();\n    }\n}\n\nconst onCheckName = (name) => {\n    if (!allContacts) {\n        return;\n    }\n    const normalizeName = name.toLowerCase();\n    const checkname = allContacts.filter(contact =>\n        contact.name.toLowerCase() === normalizeName\n    );\n    if (checkname.length !== 0) {\n        return true;\n    } else {\n        return false;\n    }\n    }\n    \n\nreturn (\n    <>\n    <form onSubmit={handleSubmit} >\n        <label className={style.wrapper}>Name\n            <input className={style.field}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={handleChange}\n                value={name} \n            />\n        </label>\n        <label className={style.wrapper}>Number\n            <input className={style.field}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={handleChange}\n                value={number}\n            />\n        </label>\n    <button className={style.btn} type=\"submit\">Save changes</button>\n    </form>\n    <button className={style.cancel_btn} type=\"button\" onClick={() => toggleModal()}>Cancel</button>\n    </>\n);\n}\n\nexport default ModalEditForm;\n\nModalEditForm.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactDetailPage_btn__ZyDwd\",\"contact_btn\":\"ContactDetailPage_contact_btn__hOy-T\",\"userAbout\":\"ContactDetailPage_userAbout__C1oX1\",\"header\":\"ContactDetailPage_header__HTeQb\",\"container\":\"ContactDetailPage_container__m+vMB\"};","import { useParams, Link, useLocation } from \"react-router-dom\";\nimport { useState } from \"react\"; \nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getAllContacts, getCurrentUser } from \"../../redux/contacts/contacts-selectors\";\nimport Modal from \"shared/components/Modal/Modal\";\nimport ModalQuestion from \"shared/components/Modal/ModalQuestion\";\nimport ModalEditForm from \"shared/components/Modal/ModalEditForm\";\nimport style from '../ContactDetailPage/ContactDetailPage.module.css';\n\nconst ContactDetailPage = () => {\n\nconst [isModalOpen, setIsModalOpen] = useState(false);\nconst [menu, setMenu] = useState(\"\");\nconst [changeName, setchangeName] = useState(null);\n\nconst location = useLocation();\nconst { id } = useParams();\nconst contacts = useSelector(getAllContacts);\nconst contactDetail = contacts.filter(contact => contact.id === id);\n\nconst currentUser = useSelector(getCurrentUser);\n\nuseEffect(() => {\n    setchangeName(currentUser); \n}, [currentUser]);\n\nconst buttonDeleteClickHandler =() => {\n    setIsModalOpen(!isModalOpen);\n    setMenu(\"delete\");\n}\n\nconst buttonEditClickHandler =() => {\n    setIsModalOpen(!isModalOpen);\n    setMenu(\"edit\");\n}\n\n\nreturn (\n    <div className={style.container}>\n    {contactDetail && (\n        <>\n            <Link to={location.state.from} className={style.contact_btn}>Go back</Link>\n            {(changeName === null) ? ( \n                <div>\n                    <p className={style.userAbout}><span className={style.header}>name: </span>{contactDetail[0].name}</p>\n                    <p className={style.userAbout}><span className={style.header}>number: </span>{contactDetail[0].number}</p>\n                </div>\n            ) : (\n                <div>\n                    <p className={style.userAbout}><span className={style.header}>name: </span>{currentUser.name}</p>\n                    <p className={style.userAbout}><span className={style.header}>number: </span>{currentUser.number}</p>\n                </div>\n            )}\n            <button type=\"button\" onClick={buttonDeleteClickHandler} className={style.btn} >Delete user</button>\n            {(isModalOpen && menu === \"delete\") && \n            <Modal toggleModal={buttonDeleteClickHandler} >\n                <ModalQuestion toggleModal={buttonDeleteClickHandler} />\n            </Modal>}\n            <button type=\"button\" onClick={buttonEditClickHandler} className={style.btn} >Edit user</button>\n            {(isModalOpen && menu === \"edit\") && \n            <Modal toggleModal={buttonEditClickHandler}>\n                <ModalEditForm toggleModal={buttonEditClickHandler}/>\n            </Modal>}\n        </>\n    )}\n    </div>\n);\n};\n\nexport default ContactDetailPage;","export const getAllContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getCurrentUser = state => state.contacts.currentUser;\nexport const filter = ({filter}) => filter;\n\nexport const getFilteredContacts = ({contacts: {contacts, isLoading, error }, filter}) => {\n    if (!filter) {\n        return contacts;\n    }\n    const getVisibleContacts = () => {\n    const lowerCaseFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(lowerCaseFilter),\n    );\n    };\n    \n    const visibleContacts = getVisibleContacts();\n\n    return visibleContacts;\n}\n"],"names":["modalRoot","document","querySelector","toggleModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","className","style","onClick","currentTarget","target","dispatch","useDispatch","navigate","useNavigate","id","useParams","type","deleteContacts","allContacts","useSelector","getAllContacts","contactDetail","filter","contact","useState","name","setName","number","setNumber","handleChange","value","clearForm","onCheckName","normalizeName","toLowerCase","length","onSubmit","controlName","preventDefault","alert","changeContactDetail","pattern","title","required","onChange","isModalOpen","setIsModalOpen","menu","setMenu","changeName","setchangeName","location","useLocation","currentUser","getCurrentUser","buttonDeleteClickHandler","buttonEditClickHandler","to","state","from","contacts","getIsLoading","isLoading","getError","error","getFilteredContacts","lowerCaseFilter","includes","getVisibleContacts"],"sourceRoot":""}