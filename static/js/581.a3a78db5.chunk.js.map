{"version":3,"file":"static/js/581.a3a78db5.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/shared/components/Modal/Modal.module.css?da56","shared/components/Modal/Modal.jsx","webpack://react-homework-template/./src/shared/components/Modal/ModalQuestion.module.css?d648","shared/components/Modal/ModalQuestion.jsx","webpack://react-homework-template/./src/shared/components/Modal/ModalEditForm.module.css?fa94","shared/components/Modal/ModalEditForm.jsx","webpack://react-homework-template/./src/pages/ContactDetailPage/ContactDetailPage.module.css?d7fd","pages/ContactDetailPage/ContactDetailPage.jsx","redux/contacts/contacts-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modal__backdrop\":\"Modal_modal__backdrop__zqa1y\",\"modal__content\":\"Modal_modal__content__qkKAK\"};","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport style from \"./Modal.module.css\";\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const  Modal = ({ toggleModal, children }) => {\n\nuseEffect(() => {\nwindow.addEventListener('keydown', handleKeyDown);\n\nreturn () => { window.removeEventListener('keydown', handleKeyDown)}\n});\n\nconst handleKeyDown = event => {\nif (event.code === 'Escape') {\n    toggleModal();\n}\n};\n\nconst handleBackdropClick = event => {\nif (event.currentTarget === event.target) {\n    toggleModal();\n}\n};\n\n\nreturn createPortal(\n    <div className={style.modal__backdrop} onClick={handleBackdropClick}>\n    <div className={style.modal__content}>\n        {children}\n    </div>\n    </div>,\n    modalRoot,\n);\n}\n\nexport default Modal;\n\nModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ModalQuestion_btn__nQUYz\",\"list\":\"ModalQuestion_list__OkZfu\",\"text\":\"ModalQuestion_text__RgDMn\"};","import { useDispatch } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { deleteContacts } from \"redux/contacts/contacts-operations\";\nimport PropTypes from 'prop-types';\nimport style from \"./ModalQuestion.module.css\";\n\nconst ModalQuestion = ( { toggleModal } ) => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const { id } = useParams();\n\n    const confirmButtonHandler = () => {\n        dispatch(deleteContacts(id));\n        navigate(\"/contacts\");\n    }\n\n\nreturn (\n    <>\n        <p className={style.text} >Are you sure?</p>\n        <ul className={style.list} >\n            <li>\n                <button className={style.btn} type=\"button\" onClick={() => confirmButtonHandler()}>Confirm</button>\n            </li>\n            <li>\n                <button className={style.btn} type=\"button\" onClick={() => toggleModal()}>Cancel</button>\n            </li>\n        </ul>\n    </>\n)};\n\nexport default ModalQuestion;\n\nModalQuestion.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalEditForm_wrapper__4JlHp\",\"field\":\"ModalEditForm_field__iFi0o\",\"btn\":\"ModalEditForm_btn__BMABc\",\"cancel_btn\":\"ModalEditForm_cancel_btn__5kEhJ\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { changeContactDetail } from \"redux/contacts/contacts-operations\";\nimport { getCurrentUser, getAllContacts } from \"redux/contacts/contacts-selectors\";\nimport PropTypes from 'prop-types';\nimport style from \"./ModalEditForm.module.css\";\n\nconst ModalEditForm = ({ toggleModal }) => {\n\nconst { id } = useParams();\nconst currentUser = useSelector(getCurrentUser);\nconst allContacts = useSelector(getAllContacts);\n\nconst [name, setName] = useState(currentUser.name);\nconst [number, setNumber] = useState(currentUser.number);\n\nconst dispatch = useDispatch();\n\nconst handleChange = event => {\n    const {name, value} = event.currentTarget;\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n\n        case 'number':\n            setNumber(value);\n            break;\n        \n        default:\n            return;\n    }\n};\n\nconst handleSubmit = event => {\n    const controlName = event.currentTarget.name.value;\n    event.preventDefault();\n    if (onCheckName(controlName)) {\n        alert(`${controlName} is already in contacts`);\n        setName(\"\");\n    } else { \n        dispatch(changeContactDetail({ id, name, number }));\n        toggleModal();\n        setName(\"\");\n        setNumber(\"\");\n    }\n};\n\n\nconst onCheckName = (name) => {\n    if (!allContacts) {\n        return;\n    }\n    const normalizeName = name.toLowerCase();\n    const normalizeCurrentUserName = currentUser.name.toLowerCase();\n    \n    const deleteCurrentName = allContacts\n        .filter(contact => contact.name.toLowerCase() !== normalizeCurrentUserName)\n        .map(contact => contact.name)\n\n    const checkname = deleteCurrentName.filter(name => name.toLowerCase() === normalizeName);\n\n    if (checkname.length !== 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nreturn (\n    <>\n    <form onSubmit={handleSubmit} >\n        <label className={style.wrapper}>Name\n            <input className={style.field}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={handleChange}\n                value={name} \n            />\n        </label>\n        <label className={style.wrapper}>Number\n            <input className={style.field}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={handleChange}\n                value={number}\n            />\n        </label>\n    <button className={style.btn} type=\"submit\">Save changes</button>\n    </form>\n    <button className={style.cancel_btn} type=\"button\" onClick={() => toggleModal()}>Cancel</button>\n    </>\n);\n}\n\nexport default ModalEditForm;\n\nModalEditForm.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactDetailPage_btn__ZyDwd\",\"contact_btn\":\"ContactDetailPage_contact_btn__hOy-T\",\"userAbout\":\"ContactDetailPage_userAbout__C1oX1\",\"header\":\"ContactDetailPage_header__HTeQb\"};","import { Link, \n    // useLocation \n} from \"react-router-dom\";\nimport { useState } from \"react\"; \nimport { useSelector } from \"react-redux\";\nimport { getCurrentUser, getCurrentLocation } from \"../../redux/contacts/contacts-selectors\";\nimport Modal from \"shared/components/Modal/Modal\";\nimport ModalQuestion from \"shared/components/Modal/ModalQuestion\";\nimport ModalEditForm from \"shared/components/Modal/ModalEditForm\";\nimport style from '../ContactDetailPage/ContactDetailPage.module.css';\n\nconst ContactDetailPage = () => {\n\nconst [isModalOpen, setIsModalOpen] = useState(false);\nconst [menu, setMenu] = useState(\"\");\n\n// const location = useLocation();\n// console.log(location.state.from);\nconst location = useSelector(getCurrentLocation);\n// console.log(currentLocation.state.from);\n\nconst currentUser = useSelector(getCurrentUser);\n\nconst buttonDeleteClickHandler =() => {\n    setIsModalOpen(!isModalOpen);\n    setMenu(\"delete\");\n}\n\nconst buttonEditClickHandler =() => {\n    setIsModalOpen(!isModalOpen);\n    setMenu(\"edit\");\n}\n\nreturn (\n    <div className={style.container}>\n        <>\n            <Link to={location.state.from} className={style.contact_btn}>Go back</Link>\n                <div>\n                    <p className={style.userAbout}><span className={style.header}>name: </span>{currentUser.name}</p>\n                    <p className={style.userAbout}><span className={style.header}>number: </span>{currentUser.number}</p>\n                </div>\n            <button type=\"button\" onClick={buttonDeleteClickHandler} className={style.btn} >Delete user</button>\n            {(isModalOpen && menu === \"delete\") && \n            <Modal toggleModal={buttonDeleteClickHandler} >\n                <ModalQuestion toggleModal={buttonDeleteClickHandler} />\n            </Modal>}\n            <button type=\"button\" onClick={buttonEditClickHandler} className={style.btn} >Edit user</button>\n            {(isModalOpen && menu === \"edit\") && \n            <Modal toggleModal={buttonEditClickHandler}>\n                <ModalEditForm toggleModal={buttonEditClickHandler}/>\n            </Modal>}\n        </>\n    </div>\n);\n};\n\nexport default ContactDetailPage;\n","export const getAllContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getCurrentUser = state => state.contacts.currentUser;\nexport const getCurrentLocation = state => state.contacts.currentLocation;\nexport const filter = ({filter}) => filter;\n\nexport const getFilteredContacts = ({contacts: {contacts, isLoading, error }, filter}) => {\n    if (!filter) {\n        return contacts;\n    }\n    const getVisibleContacts = () => {\n    const lowerCaseFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(lowerCaseFilter),\n    );\n    };\n    \n    const visibleContacts = getVisibleContacts();\n\n    return visibleContacts;\n}\n"],"names":["modalRoot","document","querySelector","toggleModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","className","style","onClick","currentTarget","target","dispatch","useDispatch","navigate","useNavigate","id","useParams","type","deleteContacts","currentUser","useSelector","getCurrentUser","allContacts","getAllContacts","useState","name","setName","number","setNumber","handleChange","value","onCheckName","normalizeName","toLowerCase","normalizeCurrentUserName","checkname","filter","contact","map","length","onSubmit","controlName","preventDefault","alert","changeContactDetail","pattern","title","required","onChange","isModalOpen","setIsModalOpen","menu","setMenu","location","getCurrentLocation","buttonDeleteClickHandler","buttonEditClickHandler","to","state","from","contacts","getIsLoading","isLoading","getError","error","currentLocation","getFilteredContacts","lowerCaseFilter","includes","getVisibleContacts"],"sourceRoot":""}